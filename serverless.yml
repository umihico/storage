service: storage

custom:
  domainName-prod: storage.umihi.co
  domainName-stg: stg-${self:custom.domainName-prod}
  domainName: ${self:custom.domainName-${opt:stage, self:provider.stage}}

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'stg'}
  region: ap-northeast-1
  versionFunctions: false
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "cloudfront:CreateInvalidation"
      Resource: "*"


functions:
  invalidate_by_s3event:
    handler: handler.invalidate
    environment:
      CLOUDFRONT_DISTRIBUTION_ID:
        Ref: WebsiteCloudfront
    dependsOn:
      - WebsiteBucket
      - WebsiteCloudfront
    # events:
    #   - s3:
    #       bucket: ${self:custom.domainName}
    #       existing: true

resources:
  Resources:
    WebsiteCloudfrontOriginAccessIdentity:
      Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "access-identity-${self:custom.domainName}"
    WebsiteBucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      DependsOn:
      - WebsiteBucket
      - WebsiteCloudfrontOriginAccessIdentity
      Properties:
        Bucket: ${self:custom.domainName}
        PolicyDocument:
          Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Resource: "arn:aws:s3:::${self:custom.domainName}/*"
            Principal:
              CanonicalUser: !GetAtt WebsiteCloudfrontOriginAccessIdentity.S3CanonicalUserId
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.domainName}
        WebsiteConfiguration:
          RedirectAllRequestsTo:
            HostName: ${self:custom.domainName}
            Protocol: https
        PublicAccessBlockConfiguration:
          BlockPublicAcls : true
          BlockPublicPolicy : true
          IgnorePublicAcls : true
          RestrictPublicBuckets : true
    WebsiteCloudfront:
      Type: AWS::CloudFront::Distribution
      DependsOn:
      - WebsiteBucket
      Properties:
        DistributionConfig:
          Origins:
          - DomainName: !GetAtt WebsiteBucket.RegionalDomainName # .DomainName(.s3.amazonaws.com) takes time to be ready https://stackoverflow.com/questions/38706424/aws-cloudfront-returns-http-307-when-origin-is-s3-bucket
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                  - ""
                  -
                    - "origin-access-identity/cloudfront/"
                    -
                      Ref: WebsiteCloudfrontOriginAccessIdentity
          Enabled: true
          HttpVersion: 'http2'
          DefaultRootObject: index.html
          Aliases:
          - ${self:custom.domainName}
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            Compress: true
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          PriceClass: PriceClass_All
          ViewerCertificate:
            AcmCertificateArn: ${ssm:usacmarn}
            SslSupportMethod: sni-only
    WebsiteDNSName:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: umihi.co. # you need (.)period at the end
        RecordSets:
        - Name: ${self:custom.domainName}. # you need (.)period at the end
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 #  This is always the hosted zone ID when you create an alias record that routes traffic to a CloudFront distribution.
            # DNSName: ddddxxxxyyyyzzzzz.cloudfront.net # you can hard-code like this
            DNSName:
              Fn::GetAtt: [ WebsiteCloudfront, DomainName ]
